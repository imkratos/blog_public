<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CopyOnWriteArrayList on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/tags/copyonwritearraylist/</link>
    <description>Recent content in CopyOnWriteArrayList on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Nov 2016 23:14:52 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/copyonwritearraylist/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JDK源码之CopyOnWriteArrayList</title>
      <link>http://localhost:1313/post/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bcopyonwritearraylist/</link>
      <pubDate>Thu, 10 Nov 2016 23:14:52 +0000</pubDate>
      
      <guid>http://localhost:1313/post/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bcopyonwritearraylist/</guid>
      <description>&lt;h4 id=&#34;什么是copyonwritearraylist&#34;&gt;什么是CopyOnWriteArrayList&lt;/h4&gt;

&lt;p&gt;CopyOnWriteArrayList是一个线程安全的List，和它相同的还有这几个,Vectory,SynchronizedList。
它们都是实现了List接口的线程安全类。&lt;/p&gt;

&lt;p&gt;CopyOnWriteArrayList使用的是一种写时复制的算法，也就是说在执行add方法的时候，并不像传统的ArrayList一样在当前数组直接操作，
而是在执行add方法的时候，会把原来的数组复制并且长度+1，然后把新值设置到新的数组中，然后把新数组设置为当前使用状态，由于数组是&lt;code&gt;volatile&lt;/code&gt;修饰的，所以JVM会自动来保证数组的可见性。&lt;/p&gt;

&lt;p&gt;这样使此List在读取时可以不用加锁，提高读取效率，但是在添加的时候效率会很低下。所以我感觉CopyOnWriteArrayList的使用场景就是读多写少的场景，甚至在尽可能的情况下，不去写。这样才能发挥此数据结构的最大优点。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>