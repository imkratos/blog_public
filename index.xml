<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代码狗 - 还是写代码能让人幸福</title>
    <link>https://zhishuo.info/</link>
    <description>Recent content on 代码狗 - 还是写代码能让人幸福</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 09 Dec 2016 16:16:30 +0000</lastBuildDate>
    
	<atom:link href="https://zhishuo.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JDK1.8源码之ConcurrentHashMap</title>
      <link>https://zhishuo.info/post/blog_hugo/jdk1.8%E6%BA%90%E7%A0%81%E4%B9%8Bconcurrenthashmap/</link>
      <pubDate>Fri, 09 Dec 2016 16:16:30 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/jdk1.8%E6%BA%90%E7%A0%81%E4%B9%8Bconcurrenthashmap/</guid>
      <description>什么是ConcurrentHashMap 以下观点都是建立在JDK1.8之上。 我们知道HashMap是非线程安全的，所以JDK给我们提供了几种</description>
    </item>
    
    <item>
      <title>JDK源码之LinkedHashMap</title>
      <link>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Blinkedhashmap/</link>
      <pubDate>Sun, 04 Dec 2016 13:18:58 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Blinkedhashmap/</guid>
      <description>LinkedHashMap使用场景 我们都知道平常使用的HashMap是存放无顺序的，但当我们需要有顺序的HashMap的时候呢？所以JDK提</description>
    </item>
    
    <item>
      <title>JDK源码之ThreadLocal</title>
      <link>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bthreadlocal/</link>
      <pubDate>Sat, 26 Nov 2016 21:07:05 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bthreadlocal/</guid>
      <description>&lt;h4 id=&#34;threadlocal介绍&#34;&gt;ThreadLocal介绍&lt;/h4&gt;

&lt;p&gt;一般我们都是如果发现有资源需要共享的时候，在多个线程之间要互相共享数据的时候，我们可以使用&lt;code&gt;ThreadLocal&lt;/code&gt;来实现。因为存入&lt;code&gt;ThreadLocal&lt;/code&gt;中的数据是和每个线程绑定的，所以不会存在数据竞争的问题了。&lt;/p&gt;

&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;

&lt;p&gt;例子如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ThreadLocalTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;executeThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;executeThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;shutdown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyThread&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ThreadLocal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threadLocal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;threadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hexo博客主动推送到百度站长平台</title>
      <link>https://zhishuo.info/post/blog_hugo/hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81%E5%88%B0%E7%99%BE%E5%BA%A6%E7%AB%99%E9%95%BF%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Sat, 26 Nov 2016 17:19:09 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81%E5%88%B0%E7%99%BE%E5%BA%A6%E7%AB%99%E9%95%BF%E5%B9%B3%E5%8F%B0/</guid>
      <description>&lt;h4 id=&#34;推送百度站长平台&#34;&gt;推送百度站长平台&lt;/h4&gt;

&lt;p&gt;百度站长平台有几种方式提交自己的链接
1. 主动推送(实时)
2. 自动推送
3. sitemap&lt;/p&gt;

&lt;p&gt;或者自己手工提交，这里主要说以上三种方式。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hexo博客next主题修改静态资源为CDN</title>
      <link>https://zhishuo.info/post/blog_hugo/hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%BAcdn/</link>
      <pubDate>Tue, 15 Nov 2016 23:55:21 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%B8%BAcdn/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;博主最近看到博客打开速度非常慢，点开chrome的开发者工具查看是由于css,js,图片加载太慢，故&lt;code&gt;css,js&lt;/code&gt;换成了国内的cdn，图片换成了&lt;a href=&#34;http://www.qiniu.com/&#34;&gt;七牛云&lt;/a&gt;。
打开主题配置文件&lt;code&gt;_config.yml&lt;/code&gt;以下为修改方式:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK源码之HashMap</title>
      <link>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bhashmap/</link>
      <pubDate>Sat, 12 Nov 2016 15:39:10 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bhashmap/</guid>
      <description>&lt;h4 id=&#34;什么是hashmap&#34;&gt;什么是HashMap&lt;/h4&gt;

&lt;p&gt;HashMap是一个可以提供O(1)时间复杂度的数据结构，由数组和链表数据结构组成。在对存入的key进行hash之后，然后用hash值在数组上确定一个位置，把value对象以Node节点形式放入到数组的链表当中。&lt;/p&gt;

&lt;p&gt;jdk1.8之后对此做了优化，因为如果发生了数据倾斜，可能会使数组某个下标的Node链表非常长，因为链表查询起来比较慢，所以1.8之后修改了，当Node链表长度大于8时，会把该下标位置的链表数据结构修改为红黑树的结构来保证查询的速度。当数据长度小于8时，会再修改为链表。&lt;/p&gt;

&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;

&lt;p&gt;个人理解使用场景应该是在不需要复杂的查询，只需要一个Key对应一个Value，写入少的场景。因为像HashMap，ArrayList这种数据结构都提供了自动扩容的功能，像HashMap的负载因子是0.75，也就是当数组中75%的位置都有值以后会进行扩容。每次扩容的时候都涉及到每个数据的rehash和数组的复制，所以当写入数据量非常大的时候，会不断的进行rehash和复制，有可能会造成CPU占用率非常高(这只是个人平时学习的理解，如果有不对之处请大家指正)。&lt;/p&gt;

&lt;p&gt;所以个人感觉HashMap的使用场景也是读多写少的场景，可以提供很快速度的读，写入的速度也可以，但如果提前知道Map里要放入多少数据，最好在new对象的时候，就手动指定出长度，这样可以避免rehash，从来变相提高使用效率。&lt;/p&gt;

&lt;h4 id=&#34;源码实现-jdk1-8版本&#34;&gt;源码实现 jdk1.8版本&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;以下的代码都是代码在上面，解释在下面。&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&#34;变量声明&#34;&gt;变量声明&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	 &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * The default initial capacity - MUST be a power of two.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aka&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个值是HashMap默认初始化的长度，也就是16长。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * The maximum capacity, used if a higher value is implicitly specified
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * by either of the constructors with arguments.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     * MUST be a power of two &amp;lt;= 1&amp;lt;&amp;lt;30.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1073741824&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里按注释看，应该是HashMap支持的最大长度，如果超过这个值，则使用这个值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK源码之CopyOnWriteArrayList</title>
      <link>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bcopyonwritearraylist/</link>
      <pubDate>Thu, 10 Nov 2016 23:14:52 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/jdk%E6%BA%90%E7%A0%81%E4%B9%8Bcopyonwritearraylist/</guid>
      <description>&lt;h4 id=&#34;什么是copyonwritearraylist&#34;&gt;什么是CopyOnWriteArrayList&lt;/h4&gt;

&lt;p&gt;CopyOnWriteArrayList是一个线程安全的List，和它相同的还有这几个,Vectory,SynchronizedList。
它们都是实现了List接口的线程安全类。&lt;/p&gt;

&lt;p&gt;CopyOnWriteArrayList使用的是一种写时复制的算法，也就是说在执行add方法的时候，并不像传统的ArrayList一样在当前数组直接操作，
而是在执行add方法的时候，会把原来的数组复制并且长度+1，然后把新值设置到新的数组中，然后把新数组设置为当前使用状态，由于数组是&lt;code&gt;volatile&lt;/code&gt;修饰的，所以JVM会自动来保证数组的可见性。&lt;/p&gt;

&lt;p&gt;这样使此List在读取时可以不用加锁，提高读取效率，但是在添加的时候效率会很低下。所以我感觉CopyOnWriteArrayList的使用场景就是读多写少的场景，甚至在尽可能的情况下，不去写。这样才能发挥此数据结构的最大优点。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hexo next主题添加LeanCloud统计功能</title>
      <link>https://zhishuo.info/post/blog_hugo/hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0leancloud%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 10 Nov 2016 20:51:47 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0leancloud%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</guid>
      <description>遇到的问题 网上能查到很多next主题添加LeanCloud主题的方法，但我看都是说在站点的_config.yml中添加 1 2 3 4 leancloud_visitors: enable: true app_id: appid app_key: key</description>
    </item>
    
    <item>
      <title>mac下使用springli创建springboot应用</title>
      <link>https://zhishuo.info/post/blog_hugo/mac%E4%B8%8B%E4%BD%BF%E7%94%A8springli%E5%88%9B%E5%BB%BAspringboot%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 04 Nov 2016 15:53:51 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/mac%E4%B8%8B%E4%BD%BF%E7%94%A8springli%E5%88%9B%E5%BB%BAspringboot%E5%BA%94%E7%94%A8/</guid>
      <description>环境准备 生成springboot有以下几种方式 1. maven 2. gradle 3. springli 4. spring官网可以点击生成脚手架 spring官网介绍说springli是最快的</description>
    </item>
    
    <item>
      <title>使用hexo生成博客在github js css 404解决方案</title>
      <link>https://zhishuo.info/post/blog_hugo/%E4%BD%BF%E7%94%A8hexo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2%E5%9C%A8github-js-css-404%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 04 Nov 2016 13:32:58 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E4%BD%BF%E7%94%A8hexo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2%E5%9C%A8github-js-css-404%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>问题 博主最近又开始写博客了，发现使用hexo next 主题，上传到github上之后，所有的vendors文件夹下的资源访问404，博主查了一些资料</description>
    </item>
    
    <item>
      <title>读spring源码深度解析(二)</title>
      <link>https://zhishuo.info/post/blog_hugo/%E8%AF%BBspring%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BA%8C/</link>
      <pubDate>Wed, 09 Mar 2016 17:16:21 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E8%AF%BBspring%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BA%8C/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;不明白&lt;/em&gt;&lt;/strong&gt;
&lt;code&gt;DefaultListableBeanFactory.java&lt;/code&gt;中使用了&lt;code&gt;AccessController.doPrivileged()&lt;/code&gt;方法，个人理解此方法好像是以当前上下文执行一些代码。
&lt;code&gt;javaUtilOptionalClass&lt;/code&gt;这个属性，是用了JDK8的&lt;code&gt;java.util.Optional&lt;/code&gt;,此类是用来避免在Java中出现各种null的问题,但不知道为什么是写在了静态代码块中，而且是以动态加载的方式来加载的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;初始类&lt;/em&gt;&lt;/strong&gt;
从&lt;code&gt;DefaultListableBeanFactory.java&lt;/code&gt;类的getBean()中，开始对整个工厂类进分析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ogflhfadi.bkt.clouddn.com/DefaultListableBeanFactory.png&#34; alt=&#34;类的关系调用图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;静态导入，如果你多次用到某个工具类的静态方法，可以使用静态导入，这样使代码更整洁美观。
&lt;code&gt;SimpleAliasRegistry.java&lt;/code&gt;这个类实现了对Alias的一些操作。
&lt;code&gt;BeanFactory.java&lt;/code&gt;接口定义一些对Bean的基本操作。
&lt;code&gt;DefaultSingletonBeanRegistry.java&lt;/code&gt;对spring对Bean的一些操作做了各种封装，创建，消毁，依赖等。
&lt;code&gt;AbstractAutowireCapableBeanFactory.java&lt;/code&gt;对&lt;code&gt;AutowireCapableBeanFactory&lt;/code&gt;定义的方法进行了实现，此类
&lt;code&gt;XmlBeanDefinitionReader.java&lt;/code&gt;实现了用xml解析资源文件，并且实现了&lt;code&gt;DefaultListableBeanFactory.java&lt;/code&gt;类&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阅读ActiveMQ源码总结</title>
      <link>https://zhishuo.info/post/blog_hugo/%E9%98%85%E8%AF%BBactivemq%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 07 Jan 2016 22:06:48 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E9%98%85%E8%AF%BBactivemq%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;下载源码&lt;code&gt;git clone https://github.com/apache/activemq.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用maven编译源码并且下载依赖&lt;code&gt;mvn clean install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导入到开发工具eclipse&lt;code&gt;mvn eclipse:eclipse&lt;/code&gt; 或者idea &lt;code&gt;mvn idea:idea&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认会去maven中央仓库下载jar包，如果下载速度慢可以翻墙或者改成开源中国的镜像仓库
&lt;code&gt;xml
&amp;lt;mirrors&amp;gt;
&amp;lt;mirror&amp;gt;
  &amp;lt;id&amp;gt;CN&amp;lt;/id&amp;gt;
  &amp;lt;name&amp;gt;OSChina Central&amp;lt;/name&amp;gt;
  &amp;lt;url&amp;gt;http://maven.oschina.net/content/groups/public/&amp;lt;/url&amp;gt;
  &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
&amp;lt;/mirror&amp;gt;
&amp;lt;/mirrors&amp;gt;
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>archLinux安装遇到的问题</title>
      <link>https://zhishuo.info/post/blog_hugo/archlinux%E5%AE%89%E8%A3%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 24 Dec 2015 20:25:32 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/archlinux%E5%AE%89%E8%A3%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;pacman -Syy 更新之后才能用&lt;/li&gt;
&lt;li&gt;启动ssh服务需要安装openssh,&lt;code&gt;pacman -S openssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动sshd服务&lt;code&gt;systemctl start sshd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置为开机启动服务&lt;code&gt;systemctl enable sshd.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装vim之后，显示libncursesw.so.6不能找到，运行&lt;code&gt;pacman -Syu&lt;/code&gt;升级即可</description>
    </item>
    
    <item>
      <title>读activeMQ源码(一)</title>
      <link>https://zhishuo.info/post/blog_hugo/%E8%AF%BBactivemq%E6%BA%90%E7%A0%81%E4%B8%80/</link>
      <pubDate>Wed, 09 Dec 2015 00:54:49 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E8%AF%BBactivemq%E6%BA%90%E7%A0%81%E4%B8%80/</guid>
      <description>最近的学习到了消息的阶段，查了下网上的资料，并没有很多具体介绍某一个消息中间件的源码是如何实现，帮自己下了源码想分析下去，希望能坚持。 源码G</description>
    </item>
    
    <item>
      <title>mac树莓派安装kaliLinux</title>
      <link>https://zhishuo.info/post/blog_hugo/mac%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85kalilinux/</link>
      <pubDate>Fri, 04 Dec 2015 21:13:51 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/mac%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85kalilinux/</guid>
      <description>&lt;p&gt;树莓派到手大概有一周了，想折腾下kali linux，记录下安装步骤。&lt;/p&gt;

&lt;p&gt;准备工作，必须品：
1. 树莓派板子一个
2. 5V电源一个
3. 8G SD卡一张
4. kali linux img &lt;a href=&#34;https://www.offensive-security.com/kali-linux-vmware-arm-image-download/&#34;&gt;下载地址&lt;/a&gt; 选择 &amp;ldquo;RaspberryPi 2&amp;rdquo; 版本即可
5. 无线网卡或者网线
6. 显示屏&lt;/p&gt;

&lt;h3 id=&#34;windows安装&#34;&gt;windows安装&lt;/h3&gt;

&lt;p&gt;怎样在Windows下将Kali安装到SD卡上
- 下载普通版的树莓派专用Kali Linux，并解压img。
- 下载名为Win32DiskImager的压缩包并解压其中exe后缀的软件。
将SD卡插入你的PC中（记得用读卡器）。
- 双击打开Win32DiskImager.exe，如果你用的是WIN7或WIN8，则需要点击鼠标右键并选择“以管理员身份运行”。
- 如果该软件无法自动侦测到你的SD卡，你就要在右上角的下拉菜单中找到SD卡并手动选择它。
- 在软件的图像文件部分点击小文件夹的图标，找到你刚刚下载的Raspbian.img文件。
- 点击“写入 or write”按键，Win32DiskImager就会帮你完成其它步骤。安装过程结束后，你就可以拔出SD卡然后将其插入树莓派了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树莓派ntp时间同步问题</title>
      <link>https://zhishuo.info/post/blog_hugo/%E6%A0%91%E8%8E%93%E6%B4%BEntp%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 30 Nov 2015 22:48:37 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E6%A0%91%E8%8E%93%E6%B4%BEntp%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</guid>
      <description>今天刚到手树莓派，看了下时间，于是上网搜了下时间同步的问题。 然而我按照网上修改的同步服务器并不能解决问题，于是自己试着改了一下。 前提：你要选</description>
    </item>
    
    <item>
      <title>读spring源码深度解析</title>
      <link>https://zhishuo.info/post/blog_hugo/%E8%AF%BBspring%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 12 Nov 2015 11:35:44 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E8%AF%BBspring%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid>
      <description>工作也有几年了，以前也尝试过想要读spring源码，但由于前几年没有参考资料，所以很难去理解，最近发现一本spring源码深度解析，怀着试试</description>
    </item>
    
    <item>
      <title>hexo博客提交到搜索引擎</title>
      <link>https://zhishuo.info/post/blog_hugo/hexo%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E5%88%B0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sun, 22 Jun 2014 10:28:55 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/hexo%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E5%88%B0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</guid>
      <description>&lt;p&gt;使用了hexo搭建博客之后，于是想把博客地址提交到搜索引擎当中，让搜索引擎来收录，在提交搜索引擎的时候遇到了一些问题记录下来。
让搜索引擎收录的方式有以下几种:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;提交某个html文件到你的博客根目录下&lt;/li&gt;
&lt;li&gt;添加网站的meta标签&lt;/li&gt;
&lt;li&gt;CNAME方式&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>hexo 搭建 github pages  问题</title>
      <link>https://zhishuo.info/post/blog_hugo/hexo-%E6%90%AD%E5%BB%BA-github-pages-%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 31 May 2014 18:45:03 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/hexo-%E6%90%AD%E5%BB%BA-github-pages-%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;由于自己想搭建一个免费的博客，所以找到了万能的github，但在搭建的过程中遇到了几个小问题，所以记下来
基本搭建的方法都是参考于&lt;a href=&#34;http://ibruce.info/2013/11/22/hexo-your-blog/&#34;&gt;利用github搭建博客&lt;/a&gt;
这个博主已经写的很全了，搭建的过程就不一一提了说下遇到的问题
1.  hexo上传后博客还是官方的
    建立了github pages的项目，并且使用了官方的建立建好了一个博客，官方默认会在master分支上开出一个gh-pages分支，然后查了官网资料说所有的内容都是显示gh-pages分支上的，但是我用hexo却传不到gh-pages分支上，并且传到了master分支内容也不会显示，后来找到原因是因为我建立的项目名字不是以#你的github帐户.github.io#命名的，所以会使hexo的上传程序传到master分支上也不会起作用，把项目名修改之后就可以了。

2.  添加多说的问题
  在官网注册后，复制了多说代码，按&lt;a href=&#34;http://www.leejianyang.com/2014/05/25/duoshuo_tutorial/&#34;&gt;教程&lt;/a&gt;做完之后发现多说模块不显示，所以查看了comment.ejs源代码
            &amp;lt;% if (config.disqus_shortname &amp;amp;&amp;amp; page.comments){ %&amp;gt;
  这里是2个判断，把config.disqus_shortname &amp;amp;&amp;amp; 删掉之后，就可以正常使用了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我为什么开始写博客</title>
      <link>https://zhishuo.info/post/blog_hugo/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 31 May 2014 18:14:02 +0000</pubDate>
      
      <guid>https://zhishuo.info/post/blog_hugo/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</guid>
      <description>最近参加了几场印象笔记的活动，听大家分享了一些自己坚持做的事，由于最近自己也在整理自己琐碎的事情，感觉虽然自己在技术上一直在积累但那都是自己</description>
    </item>
    
  </channel>
</rss>